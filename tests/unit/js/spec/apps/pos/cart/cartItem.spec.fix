/**
* Test the cart item calculates correct values based on pos_params.
*
* Params:
* calc_taxes
* prices_include_tax
* tax_display_cart
* tax_round_at_subtotal
* tax_total_display
*
* Properties:
* {float} item_discount
* {float} item_price
* {float} item_tax
* {float} item_tax_{tax_code}
* {float} line_discount
* {float} line_tax
* {float} line_tax_{tax_code}
* {float} line_total
* {float} qty
*
*/

describe('Cart', function () {

    before( function(done){

        // get dummy data
        $.getJSON( 'data/dummy-products.json', function( data ) {
            window.dummy_data = data;
            done();
        });

        // set tax rate
        POS.tax_rates = {
            "": {
                "2": {
                    "rate": "9.0000",
                    "label": "Tax 1",
                    "shipping": "yes",
                    "compound": "yes"
                },
                "3": {
                    "rate": "5.0000",
                    "label": "Tax 2",
                    "shipping": "yes",
                    "compound": "yes"
                }
            },
            "reduced-rate": {
                "4": {
                    "rate": "2.0000",
                    "label": "Reduced 1",
                    "shipping": "yes",
                    "compound": "yes"
                }
            },
            "zero-rate": {
                "5": {
                    "rate": "0.0000",
                    "label": "No Tax",
                    "shipping": "yes",
                    "compound": "yes"
                }
            }
        }

    });

    describe('POS.Entities.Cart.Model', function () {

        describe('A product in the cart', function () {

            beforeEach(function (done) {

                this.products = window.dummy_data.products;

                // reset pos_params
                POS.tax = {
                    calc_taxes: 'no',
                    prices_include_tax: 'no',
                    tax_display_cart: 'excl',
                    tax_round_at_subtotal: 'no',
                    tax_total_display: 'single'
                };

                // a cart model has no URL and so needs to
                // be part of a cart collection ...
                // is this a problem?
                this.cart = new POS.Entities.Cart.Collection();
                this.cart.once('idb:ready', function () {
                    done();
                });

            });

            afterEach(function(done) {

                this.model.destroy({
                    success: function(model, response, options){
                        done();
                    },
                    error: function(model, response, options) {
                        console.log(response);
                    }
                });

            });

            it('should be in a valid state', function (done) {

                this.model = this.cart.add( this.products[0] );
                expect(this.model).be.instanceOf(POS.Entities.Cart.Model);

                // model is saved to idb
                this.model.on( 'sync', function() {
                    done();
                });

            });

            it("should initiate with the correct values", function(done) {

                this.model = this.cart.add( this.products[0] );

                expect(this.model.get('qty')).equal(1);
                expect(this.model.get('item_price')).equal(2);
                expect(this.model.get('total')).equal(2);

                // model is saved to idb
                this.model.on( 'sync', function() {
                    done();
                });

            });

            it("should re-calculate on quantity change to any floating point number", function(done) {

                this.model = this.cart.add( this.products[0] );

                var qty = _.random(10, true);
                this.model.set( { 'qty': qty } );

                expect(this.model.get('qty')).equal(qty);
                expect(this.model.get('total')).equal( parseFloat( (2 * qty).toFixed(4) ) );

                // model is saved to idb
                this.model.on( 'sync', function() {
                    done();
                });

            });

            it("should calculate the correct exclusive tax", function(done) {

                // pos params
                POS.tax = {
                    calc_taxes: 'yes',
                    prices_include_tax: 'no',
                    tax_total_display: 'itemized'
                };

                // dummy product id 99, qty 2, regular price $3, on sale for $2
                this.model = this.cart.add( this.products[0] );
                this.model.set({ 'qty': 2, 'taxable': true });

                expect(this.model.get('item_price')).equal(2);
                expect(this.model.get('subtotal')).equal(6);
                expect(this.model.get('subtotal_tax')).equal(0.84);
                expect(this.model.get('total')).equal(4);
                expect(this.model.get('total_tax')).equal(0.56);
                expect(this.model.get('line_tax_2')).equal(0.36);
                expect(this.model.get('line_tax_3')).equal(0.2);

                // model is saved to idb
                this.model.on( 'sync', function() {
                    done();
                });

            });

            it("should calculate the correct inclusive tax", function(done) {

                // pos params
                POS.tax = {
                    calc_taxes: 'yes',
                    prices_include_tax: 'yes',
                    tax_total_display: 'itemized'
                };

                // dummy product id 99, qty 2, regular price $3, on sale for $2
                this.model = this.cart.add( this.products[0] );
                this.model.set({ 'qty': 2, 'taxable': true });

                expect(this.model.get('item_price')).equal(2);
                expect(this.model.get('subtotal')).equal(5.2632);
                expect(this.model.get('subtotal_tax')).equal(0.7368);
                expect(this.model.get('total')).equal(3.5088);
                expect(this.model.get('total_tax')).equal(0.4912);
                expect(this.model.get('line_tax_2')).equal(0.3158);
                expect(this.model.get('line_tax_3')).equal(0.1754);

                // model is saved to idb
                this.model.on( 'sync', function() {
                    done();
                });

            });

            it("should re-calculate exclusive tax with change to quantity", function(done) {

                // pos params
                POS.tax = {
                    calc_taxes: 'yes',
                    prices_include_tax: 'no',
                    tax_total_display: 'itemized'
                };

                this.model = this.cart.add( this.products[0] );
                this.model.set({ 'qty': 3, 'taxable': true });

                expect(this.model.get('item_tax')).equal(0.28);
                expect(this.model.get('item_tax_2')).equal(0.18);
                expect(this.model.get('item_tax_3')).equal(0.1);
                expect(this.model.get('total_tax')).equal(0.84);
                expect(this.model.get('line_tax_2')).equal(0.54);
                expect(this.model.get('line_tax_3')).equal(0.3);

                // model is saved to idb
                this.model.on( 'sync', function() {
                    done();
                });

            });

            it("should re-calculate inclusive tax with change to quantity", function(done) {

                // pos params
                POS.tax = {
                    calc_taxes: 'yes',
                    prices_include_tax: 'yes',
                    tax_total_display: 'itemized'
                };

                this.model = this.cart.add( this.products[0] );
                this.model.set({ 'qty': 3, 'taxable': true });

                expect(this.model.get('item_tax')).equal(0.2456);
                expect(this.model.get('item_tax_2')).equal(0.1579);
                expect(this.model.get('item_tax_3')).equal(0.0877);
                expect(this.model.get('total_tax')).equal(0.7368);
                expect(this.model.get('line_tax_2')).equal(0.4737);
                expect(this.model.get('line_tax_3')).equal(0.2632);

                // model is saved to idb
                this.model.on( 'sync', function() {
                    done();
                });

            });

            it("should re-calculate exclusive tax with item discount", function(done) {

                // pos params
                POS.tax = {
                    calc_taxes: 'yes',
                    prices_include_tax: 'no',
                    tax_total_display: 'itemized'
                };

                // set new price to $1.50
                this.model = this.cart.add( this.products[0] );
                this.model.set( { 'taxable': true, 'qty': 2, 'item_price': 1.5 } );

                expect(this.model.get('total_tax')).equal(0.42);
                expect(this.model.get('line_tax_2')).equal(0.27);
                expect(this.model.get('line_tax_3')).equal(0.15);

                // model is saved to idb
                this.model.on( 'sync', function() {
                    done();
                });

            });

            it("should re-calculate inclusive tax with item discount", function(done) {

                // pos params
                POS.tax = {
                    calc_taxes: 'yes',
                    prices_include_tax: 'yes',
                    tax_total_display: 'itemized'
                };

                // set new price to $1.50
                this.model = this.cart.add( this.products[0] );
                this.model.set( { 'taxable': true, 'qty': 2, 'item_price': 1.5 } );

                expect(this.model.get('total_tax')).equal(0.3684);
                expect(this.model.get('line_tax_2')).equal(0.2368);
                expect(this.model.get('line_tax_3')).equal(0.1316);

                // model is saved to idb
                this.model.on( 'sync', function() {
                    done();
                });

            });

        });

    });

    describe('POS.Entities.Cart.Collection', function () {

        describe('A collection of cart products', function () {

            beforeEach(function (done) {

                this.products = window.dummy_data.products;

                // let's change the product quantities
                this.products[0].qty = 3;
                this.products[0].taxable = true;
                this.products[1].qty = 4;
                this.products[2].qty = 5;

                // reset pos_params
                POS.tax = {
                    calc_taxes: 'no',
                    prices_include_tax: 'no',
                    tax_display_cart: 'excl',
                    tax_round_at_subtotal: 'no',
                    tax_total_display: 'single'
                };

                var Order = Backbone.Model.extend({
                    defaults: {
                        local_id: 1
                    },
                    sync: function( method, entities, options ) {}
                });
                this.order = new Order();
                this.cart = new POS.Entities.Cart.Collection([], { order: this.order });
                this.cart.once('idb:ready', function () {
                    done();
                });

            });

            afterEach(function(done) {

                done();

            });

            it('should be in a valid state', function () {
                this.cart.add(this.products);
                expect(this.cart.length).equal(3);
            });

            it('should sum the subtotals', function () {
                this.cart.add(this.products);
                expect(this.order.get('subtotal')).equal(182);
            });

            it('should sum the totals', function () {
                this.cart.add(this.products);
                expect(this.order.get('total')).equal(179);
            });

            it('should calculate the cart discount', function () {
                this.cart.add(this.products);
                expect(this.order.get('cart_discount')).equal(3);
            });

            it('should calculate the total tax', function () {

                // pos params
                POS.tax = {
                    calc_taxes: 'yes',
                    prices_include_tax: 'no'
                };

                this.cart.add(this.products);
                expect(this.order.get('total_tax')).equal(3.4);
            });

            //it('should calculate itemized tax', function () {
            //
            //    // pos params
            //    POS.tax = {
            //        calc_taxes: 'yes',
            //        prices_include_tax: 'no',
            //        tax_total_display: 'itemized'
            //    };
            //
            //    this.cart.add(this.products);
            //
            //});

        });

    });

});